[
    {
        "question": "What are the customer ids of customers who have at least 15 receipts?",
        "generated": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15",
        "test": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
        "generated_results": [
            [
                6
            ],
            [
                7
            ],
            [
                8
            ],
            [
                14
            ],
            [
                20
            ]
        ],
        "test_results": [
            [
                6
            ],
            [
                7
            ],
            [
                8
            ],
            [
                14
            ],
            [
                20
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0010085105895996094,
        "generation_tokens": 938,
        "judging_tokens": 170,
        "generation_failed": false
    },
    {
        "question": "What is the cheapest good with cheese flavor?",
        "generated": "SELECT id, price FROM goods WHERE flavor = \"Cheese\" ORDER BY price ASC LIMIT 1",
        "test": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
        "generated_results": [
            [
                "50-CHS",
                1.75
            ]
        ],
        "test_results": [
            [
                1.75
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0,
        "generation_tokens": 365,
        "judging_tokens": 168,
        "generation_failed": false
    },
    {
        "question": "Give me the list of ids of all goods whose id has \"APP\".",
        "generated": "SELECT id FROM goods WHERE id LIKE '%APP%'",
        "test": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
        "generated_results": [
            [
                "50-APP"
            ],
            [
                "51-APP"
            ],
            [
                "90-APP-11"
            ]
        ],
        "test_results": [
            [
                "50-APP"
            ],
            [
                "51-APP"
            ],
            [
                "90-APP-11"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.001016855239868164,
        "generation_tokens": 464,
        "judging_tokens": 164,
        "generation_failed": false
    },
    {
        "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
        "generated": "SELECT g.Id AS item\nFROM goods g\nJOIN items i ON g.Id = i.Item\nWHERE g.Flavor = 'Chocolate'\nGROUP BY g.Id\nHAVING COUNT(i.Item) <= 10",
        "test": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
        "generated_results": [
            [
                "50-CH"
            ]
        ],
        "test_results": [
            [
                "50-CH"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0009963512420654297,
        "generation_tokens": 598,
        "judging_tokens": 197,
        "generation_failed": false
    },
    {
        "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
        "generated": "SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 10 UNION SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts)",
        "test": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "generated_results": [
            [
                11891
            ],
            [
                12396
            ],
            [
                12698
            ],
            [
                12800
            ],
            [
                13355
            ],
            [
                16034
            ],
            [
                16532
            ],
            [
                17729
            ],
            [
                19002
            ],
            [
                24829
            ],
            [
                25906
            ],
            [
                26148
            ],
            [
                26240
            ],
            [
                28117
            ],
            [
                29908
            ],
            [
                32701
            ],
            [
                33060
            ],
            [
                33456
            ],
            [
                34579
            ],
            [
                34910
            ],
            [
                35904
            ],
            [
                37636
            ],
            [
                38849
            ],
            [
                40305
            ],
            [
                44590
            ],
            [
                44798
            ],
            [
                45062
            ],
            [
                45976
            ],
            [
                49977
            ],
            [
                51991
            ],
            [
                52761
            ],
            [
                53240
            ],
            [
                53376
            ],
            [
                53922
            ],
            [
                55944
            ],
            [
                58770
            ],
            [
                61008
            ],
            [
                61948
            ],
            [
                64451
            ],
            [
                64477
            ],
            [
                64861
            ],
            [
                65165
            ],
            [
                67314
            ],
            [
                68199
            ],
            [
                68753
            ],
            [
                70162
            ],
            [
                70655
            ],
            [
                72207
            ],
            [
                73437
            ],
            [
                76663
            ],
            [
                77032
            ],
            [
                77406
            ],
            [
                83085
            ],
            [
                85492
            ],
            [
                85858
            ],
            [
                95514
            ],
            [
                96258
            ],
            [
                96402
            ],
            [
                96531
            ],
            [
                96761
            ],
            [
                98806
            ],
            [
                99994
            ]
        ],
        "test_results": [
            [
                11891
            ],
            [
                12396
            ],
            [
                12698
            ],
            [
                12800
            ],
            [
                13355
            ],
            [
                16034
            ],
            [
                16532
            ],
            [
                17729
            ],
            [
                19002
            ],
            [
                24829
            ],
            [
                25906
            ],
            [
                26148
            ],
            [
                26240
            ],
            [
                28117
            ],
            [
                29908
            ],
            [
                32701
            ],
            [
                33060
            ],
            [
                33456
            ],
            [
                34579
            ],
            [
                34910
            ],
            [
                35904
            ],
            [
                37636
            ],
            [
                38849
            ],
            [
                40305
            ],
            [
                44590
            ],
            [
                44798
            ],
            [
                45062
            ],
            [
                45976
            ],
            [
                49977
            ],
            [
                51991
            ],
            [
                52761
            ],
            [
                53240
            ],
            [
                53376
            ],
            [
                53922
            ],
            [
                55944
            ],
            [
                58770
            ],
            [
                61008
            ],
            [
                61948
            ],
            [
                64451
            ],
            [
                64477
            ],
            [
                64861
            ],
            [
                65165
            ],
            [
                67314
            ],
            [
                68199
            ],
            [
                68753
            ],
            [
                70162
            ],
            [
                70655
            ],
            [
                72207
            ],
            [
                73437
            ],
            [
                76663
            ],
            [
                77032
            ],
            [
                77406
            ],
            [
                83085
            ],
            [
                85492
            ],
            [
                85858
            ],
            [
                95514
            ],
            [
                96258
            ],
            [
                96402
            ],
            [
                96531
            ],
            [
                96761
            ],
            [
                98806
            ],
            [
                99994
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.001001119613647461,
        "generation_tokens": 746,
        "judging_tokens": 193,
        "generation_failed": false
    },
    {
        "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
        "generated": "SELECT DATE FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 15))",
        "test": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
        "generated_results": [
            [
                "10-Oct-2007"
            ],
            [
                "23-Oct-2007"
            ],
            [
                "22-Oct-2007"
            ],
            [
                "19-Oct-2007"
            ],
            [
                "10-Oct-2007"
            ],
            [
                "21-Oct-2007"
            ],
            [
                "16-Oct-2007"
            ],
            [
                "19-Oct-2007"
            ],
            [
                "7-Oct-2007"
            ],
            [
                "19-Oct-2007"
            ],
            [
                "7-Oct-2007"
            ],
            [
                "19-Oct-2007"
            ],
            [
                "8-Oct-2007"
            ],
            [
                "7-Oct-2007"
            ],
            [
                "20-Oct-2007"
            ],
            [
                "25-Oct-2007"
            ],
            [
                "12-Oct-2007"
            ],
            [
                "23-Oct-2007"
            ],
            [
                "3-Oct-2007"
            ],
            [
                "18-Oct-2007"
            ],
            [
                "17-Oct-2007"
            ],
            [
                "27-Oct-2007"
            ],
            [
                "16-Oct-2007"
            ],
            [
                "22-Oct-2007"
            ],
            [
                "9-Oct-2007"
            ],
            [
                "4-Oct-2007"
            ],
            [
                "10-Oct-2007"
            ],
            [
                "16-Oct-2007"
            ],
            [
                "4-Oct-2007"
            ],
            [
                "23-Oct-2007"
            ],
            [
                "4-Oct-2007"
            ],
            [
                "6-Oct-2007"
            ],
            [
                "15-Oct-2007"
            ],
            [
                "9-Oct-2007"
            ],
            [
                "12-Oct-2007"
            ],
            [
                "31-Oct-2007"
            ],
            [
                "12-Oct-2007"
            ],
            [
                "4-Oct-2007"
            ],
            [
                "12-Oct-2007"
            ],
            [
                "14-Oct-2007"
            ],
            [
                "15-Oct-2007"
            ],
            [
                "21-Oct-2007"
            ]
        ],
        "test_results": [
            [
                "17-Oct-2007"
            ],
            [
                "12-Oct-2007"
            ],
            [
                "19-Oct-2007"
            ],
            [
                "27-Oct-2007"
            ],
            [
                "22-Oct-2007"
            ],
            [
                "16-Oct-2007"
            ],
            [
                "10-Oct-2007"
            ],
            [
                "9-Oct-2007"
            ],
            [
                "21-Oct-2007"
            ],
            [
                "7-Oct-2007"
            ],
            [
                "20-Oct-2007"
            ],
            [
                "23-Oct-2007"
            ],
            [
                "31-Oct-2007"
            ],
            [
                "3-Oct-2007"
            ],
            [
                "14-Oct-2007"
            ],
            [
                "4-Oct-2007"
            ],
            [
                "18-Oct-2007"
            ],
            [
                "6-Oct-2007"
            ],
            [
                "15-Oct-2007"
            ],
            [
                "25-Oct-2007"
            ],
            [
                "8-Oct-2007"
            ]
        ],
        "match": false,
        "confidence_score": 0.6,
        "execution_time": 0.0009946823120117188,
        "generation_tokens": 736,
        "judging_tokens": 182,
        "generation_failed": false
    },
    {
        "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
        "generated": "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) > 10)",
        "test": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
        "generated_results": [
            [
                "LOGAN"
            ],
            [
                "SLINGLAND"
            ],
            [
                "TOUSSAND"
            ],
            [
                "HELING"
            ],
            [
                "SOPKO"
            ],
            [
                "CALLENDAR"
            ],
            [
                "CRUZEN"
            ],
            [
                "ZEME"
            ]
        ],
        "test_results": [
            [
                "LOGAN"
            ],
            [
                "SLINGLAND"
            ],
            [
                "TOUSSAND"
            ],
            [
                "HELING"
            ],
            [
                "SOPKO"
            ],
            [
                "CALLENDAR"
            ],
            [
                "CRUZEN"
            ],
            [
                "ZEME"
            ]
        ],
        "match": true,
        "confidence_score": 0.6,
        "execution_time": 0.0009968280792236328,
        "generation_tokens": 857,
        "judging_tokens": 186,
        "generation_failed": false
    },
    {
        "question": "Give me a list of all the distinct items bought by the customer number 15.",
        "generated": "SELECT DISTINCT goods.Id FROM goods \nJOIN items ON goods.Id = items.Item \nJOIN receipts ON items.Receipt = receipts.ReceiptNumber \nWHERE receipts.CustomerId = 15",
        "test": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
        "generated_results": [
            [
                "70-TU"
            ],
            [
                "25-STR-9"
            ],
            [
                "70-GON"
            ],
            [
                "90-LEM-11"
            ],
            [
                "90-APR-PF"
            ],
            [
                "70-LEM"
            ],
            [
                "70-M-CH-DZ"
            ],
            [
                "90-APP-11"
            ],
            [
                "45-VA"
            ],
            [
                "51-ATW"
            ],
            [
                "90-CH-PF"
            ],
            [
                "90-BLK-PF"
            ],
            [
                "20-CA-7.5"
            ],
            [
                "51-BC"
            ],
            [
                "90-BER-11"
            ]
        ],
        "test_results": [
            [
                "70-TU"
            ],
            [
                "25-STR-9"
            ],
            [
                "70-GON"
            ],
            [
                "90-LEM-11"
            ],
            [
                "90-APR-PF"
            ],
            [
                "70-LEM"
            ],
            [
                "70-M-CH-DZ"
            ],
            [
                "90-APP-11"
            ],
            [
                "45-VA"
            ],
            [
                "51-ATW"
            ],
            [
                "90-CH-PF"
            ],
            [
                "90-BLK-PF"
            ],
            [
                "20-CA-7.5"
            ],
            [
                "51-BC"
            ],
            [
                "90-BER-11"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.001003265380859375,
        "generation_tokens": 691,
        "judging_tokens": 193,
        "generation_failed": false
    },
    {
        "question": "What are the ids of goods that cost less than 3 dollars?",
        "generated": "SELECT id FROM goods WHERE price < 3",
        "test": "SELECT id FROM goods WHERE price  <  3",
        "generated_results": [
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-R"
            ],
            [
                "70-LEM"
            ],
            [
                "70-M-CH-DZ"
            ],
            [
                "70-M-VA-SM-DZ"
            ],
            [
                "70-MAR"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ],
            [
                "50-ALM"
            ],
            [
                "50-APP"
            ],
            [
                "50-APR"
            ],
            [
                "50-CHS"
            ],
            [
                "50-CH"
            ],
            [
                "51-APR"
            ],
            [
                "51-APP"
            ],
            [
                "51-ATW"
            ],
            [
                "51-BC"
            ],
            [
                "51-BLU"
            ]
        ],
        "test_results": [
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-R"
            ],
            [
                "70-LEM"
            ],
            [
                "70-M-CH-DZ"
            ],
            [
                "70-M-VA-SM-DZ"
            ],
            [
                "70-MAR"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ],
            [
                "50-ALM"
            ],
            [
                "50-APP"
            ],
            [
                "50-APR"
            ],
            [
                "50-CHS"
            ],
            [
                "50-CH"
            ],
            [
                "51-APR"
            ],
            [
                "51-APP"
            ],
            [
                "51-ATW"
            ],
            [
                "51-BC"
            ],
            [
                "51-BLU"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0015063285827636719,
        "generation_tokens": 730,
        "judging_tokens": 162,
        "generation_failed": false
    },
    {
        "question": "Give the three most purchased items at this bakery.",
        "generated": "SELECT Item, COUNT(*) AS TotalPurchases FROM Items GROUP BY Item ORDER BY TotalPurchases DESC LIMIT 3",
        "test": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
        "generated_results": [
            [
                "90-APP-11",
                25
            ],
            [
                "90-APR-PF",
                22
            ],
            [
                "90-BLK-PF",
                20
            ]
        ],
        "test_results": [
            [
                "90-APP-11"
            ],
            [
                "90-APR-PF"
            ],
            [
                "90-BLK-PF"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0019893646240234375,
        "generation_tokens": 726,
        "judging_tokens": 172,
        "generation_failed": false
    },
    {
        "question": "Which item was bought the fewest times?",
        "generated": "SELECT item FROM items GROUP BY item ORDER BY COUNT(*) ASC LIMIT 1",
        "test": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
        "generated_results": [
            [
                "50-CH"
            ]
        ],
        "test_results": [
            [
                "50-CH"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.00098419189453125,
        "generation_tokens": 576,
        "judging_tokens": 163,
        "generation_failed": false
    },
    {
        "question": "What is the receipt number with the latest date, and what is that date?",
        "generated": "SELECT receipts.ReceiptNumber, receipts.Date FROM receipts WHERE receipts.Date = (SELECT MAX(Date) FROM receipts)",
        "test": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
        "generated_results": [
            [
                11923,
                "9-Oct-2007"
            ],
            [
                28117,
                "9-Oct-2007"
            ],
            [
                48647,
                "9-Oct-2007"
            ],
            [
                56724,
                "9-Oct-2007"
            ],
            [
                61008,
                "9-Oct-2007"
            ],
            [
                65091,
                "9-Oct-2007"
            ],
            [
                70162,
                "9-Oct-2007"
            ],
            [
                77406,
                "9-Oct-2007"
            ],
            [
                89588,
                "9-Oct-2007"
            ],
            [
                95514,
                "9-Oct-2007"
            ]
        ],
        "test_results": [
            [
                11923,
                "9-Oct-2007"
            ],
            [
                28117,
                "9-Oct-2007"
            ],
            [
                48647,
                "9-Oct-2007"
            ],
            [
                56724,
                "9-Oct-2007"
            ],
            [
                61008,
                "9-Oct-2007"
            ],
            [
                65091,
                "9-Oct-2007"
            ],
            [
                70162,
                "9-Oct-2007"
            ],
            [
                77406,
                "9-Oct-2007"
            ],
            [
                89588,
                "9-Oct-2007"
            ],
            [
                95514,
                "9-Oct-2007"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0010020732879638672,
        "generation_tokens": 627,
        "judging_tokens": 177,
        "generation_failed": false
    },
    {
        "question": "What is the id and flavor of the cheapest cookie?",
        "generated": "SELECT id, flavor FROM goods WHERE food = 'Cookie' ORDER BY price ASC LIMIT 1",
        "test": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
        "generated_results": [
            [
                "70-LEM",
                "Lemon"
            ]
        ],
        "test_results": [
            [
                "70-LEM",
                "Lemon"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0009949207305908203,
        "generation_tokens": 516,
        "judging_tokens": 169,
        "generation_failed": false
    },
    {
        "question": "What are the average prices of goods with blackberry or blueberry flavor?",
        "generated": "SELECT flavor, AVG(price) AS average_price FROM goods WHERE flavor IN ('Blackberry', 'Blueberry') GROUP BY flavor",
        "test": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
        "generated_results": [
            [
                "Blackberry",
                3.25
            ],
            [
                "Blueberry",
                2.2
            ]
        ],
        "test_results": [
            [
                2.5500000000000003
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0010116100311279297,
        "generation_tokens": 396,
        "judging_tokens": 179,
        "generation_failed": false
    },
    {
        "question": "Give the ids of cookes that are cheaper than any croissant.",
        "generated": "SELECT id FROM goods WHERE food = 'Cookie' AND price < (SELECT MIN(price) FROM goods WHERE food = 'Croissant')",
        "test": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "generated_results": [
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-R"
            ],
            [
                "70-LEM"
            ],
            [
                "70-MAR"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ]
        ],
        "test_results": [
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-R"
            ],
            [
                "70-LEM"
            ],
            [
                "70-MAR"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0010101795196533203,
        "generation_tokens": 454,
        "judging_tokens": 180,
        "generation_failed": false
    },
    {
        "question": "What are the ids of customers who spend more than 5 on average for each good?",
        "generated": "SELECT CustomerId\nFROM (\n    SELECT r.CustomerId, AVG(g.Price) AS AvgPrice\n    FROM receipts AS r\n    JOIN items AS i ON r.ReceiptNumber = i.Receipt\n    JOIN goods AS g ON i.Item = g.Id\n    GROUP BY r.CustomerId\n)\nWHERE AvgPrice > 5",
        "test": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "generated_results": [
            [
                4
            ],
            [
                10
            ]
        ],
        "test_results": [
            [
                4
            ],
            [
                10
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0019807815551757812,
        "generation_tokens": 778,
        "judging_tokens": 224,
        "generation_failed": false
    },
    {
        "question": "List the id, flavor and type of food of goods ordered by price.",
        "generated": "SELECT id, flavor, food FROM goods ORDER BY price",
        "test": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
        "generated_results": [
            [
                "70-LEM",
                "Lemon",
                "Cookie"
            ],
            [
                "70-W",
                "Walnut",
                "Cookie"
            ],
            [
                "70-R",
                "Raspberry",
                "Cookie"
            ],
            [
                "70-GA",
                "Ganache",
                "Cookie"
            ],
            [
                "70-GON",
                "Gongolais",
                "Cookie"
            ],
            [
                "70-M-VA-SM-DZ",
                "Vanilla",
                "Meringue"
            ],
            [
                "51-APR",
                "Apricot",
                "Danish"
            ],
            [
                "51-APP",
                "Apple",
                "Danish"
            ],
            [
                "51-ATW",
                "Almond",
                "Twist"
            ],
            [
                "51-BLU",
                "Blueberry",
                "Danish"
            ],
            [
                "70-M-CH-DZ",
                "Chocolate",
                "Meringue"
            ],
            [
                "70-MAR",
                "Marzipan",
                "Cookie"
            ],
            [
                "70-TU",
                "Tuile",
                "Cookie"
            ],
            [
                "50-ALM",
                "Almond",
                "Croissant"
            ],
            [
                "50-APP",
                "Apple",
                "Croissant"
            ],
            [
                "50-APR",
                "Apricot",
                "Croissant"
            ],
            [
                "50-CHS",
                "Cheese",
                "Croissant"
            ],
            [
                "50-CH",
                "Chocolate",
                "Croissant"
            ],
            [
                "51-BC",
                "Almond",
                "Bear Claw"
            ],
            [
                "45-CH",
                "Chocolate",
                "Eclair"
            ],
            [
                "45-VA",
                "Vanilla",
                "Eclair"
            ],
            [
                "90-APP-11",
                "Apple",
                "Tart"
            ],
            [
                "90-APR-PF",
                "Apricot",
                "Tart"
            ],
            [
                "90-BER-11",
                "Berry",
                "Tart"
            ],
            [
                "90-BLK-PF",
                "Blackberry",
                "Tart"
            ],
            [
                "90-BLU-11",
                "Blueberry",
                "Tart"
            ],
            [
                "90-CHR-11",
                "Cherry",
                "Tart"
            ],
            [
                "90-LEM-11",
                "Lemon",
                "Tart"
            ],
            [
                "45-CO",
                "Coffee",
                "Eclair"
            ],
            [
                "90-ALM-I",
                "Almond",
                "Tart"
            ],
            [
                "90-CH-PF",
                "Chocolate",
                "Tart"
            ],
            [
                "90-PEC-11",
                "Pecan",
                "Tart"
            ],
            [
                "90-APIE-10",
                "Apple",
                "Pie"
            ],
            [
                "20-BC-C-10",
                "Chocolate",
                "Cake"
            ],
            [
                "20-BC-L-10",
                "Lemon",
                "Cake"
            ],
            [
                "25-STR-9",
                "Strawberry",
                "Cake"
            ],
            [
                "46-11",
                "Napoleon",
                "Cake"
            ],
            [
                "20-CA-7.5",
                "Casino",
                "Cake"
            ],
            [
                "24-8x10",
                "Opera",
                "Cake"
            ],
            [
                "26-8x10",
                "Truffle",
                "Cake"
            ]
        ],
        "test_results": [
            [
                "70-LEM",
                "Lemon",
                "Cookie"
            ],
            [
                "70-W",
                "Walnut",
                "Cookie"
            ],
            [
                "70-R",
                "Raspberry",
                "Cookie"
            ],
            [
                "70-GA",
                "Ganache",
                "Cookie"
            ],
            [
                "70-GON",
                "Gongolais",
                "Cookie"
            ],
            [
                "70-M-VA-SM-DZ",
                "Vanilla",
                "Meringue"
            ],
            [
                "51-APR",
                "Apricot",
                "Danish"
            ],
            [
                "51-APP",
                "Apple",
                "Danish"
            ],
            [
                "51-ATW",
                "Almond",
                "Twist"
            ],
            [
                "51-BLU",
                "Blueberry",
                "Danish"
            ],
            [
                "70-M-CH-DZ",
                "Chocolate",
                "Meringue"
            ],
            [
                "70-MAR",
                "Marzipan",
                "Cookie"
            ],
            [
                "70-TU",
                "Tuile",
                "Cookie"
            ],
            [
                "50-ALM",
                "Almond",
                "Croissant"
            ],
            [
                "50-APP",
                "Apple",
                "Croissant"
            ],
            [
                "50-APR",
                "Apricot",
                "Croissant"
            ],
            [
                "50-CHS",
                "Cheese",
                "Croissant"
            ],
            [
                "50-CH",
                "Chocolate",
                "Croissant"
            ],
            [
                "51-BC",
                "Almond",
                "Bear Claw"
            ],
            [
                "45-CH",
                "Chocolate",
                "Eclair"
            ],
            [
                "45-VA",
                "Vanilla",
                "Eclair"
            ],
            [
                "90-APP-11",
                "Apple",
                "Tart"
            ],
            [
                "90-APR-PF",
                "Apricot",
                "Tart"
            ],
            [
                "90-BER-11",
                "Berry",
                "Tart"
            ],
            [
                "90-BLK-PF",
                "Blackberry",
                "Tart"
            ],
            [
                "90-BLU-11",
                "Blueberry",
                "Tart"
            ],
            [
                "90-CHR-11",
                "Cherry",
                "Tart"
            ],
            [
                "90-LEM-11",
                "Lemon",
                "Tart"
            ],
            [
                "45-CO",
                "Coffee",
                "Eclair"
            ],
            [
                "90-ALM-I",
                "Almond",
                "Tart"
            ],
            [
                "90-CH-PF",
                "Chocolate",
                "Tart"
            ],
            [
                "90-PEC-11",
                "Pecan",
                "Tart"
            ],
            [
                "90-APIE-10",
                "Apple",
                "Pie"
            ],
            [
                "20-BC-C-10",
                "Chocolate",
                "Cake"
            ],
            [
                "20-BC-L-10",
                "Lemon",
                "Cake"
            ],
            [
                "25-STR-9",
                "Strawberry",
                "Cake"
            ],
            [
                "46-11",
                "Napoleon",
                "Cake"
            ],
            [
                "20-CA-7.5",
                "Casino",
                "Cake"
            ],
            [
                "24-8x10",
                "Opera",
                "Cake"
            ],
            [
                "26-8x10",
                "Truffle",
                "Cake"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0020093917846679688,
        "generation_tokens": 549,
        "judging_tokens": 165,
        "generation_failed": false
    },
    {
        "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
        "generated": "SELECT DISTINCT receipts.ReceiptNumber \nFROM receipts \nINNER JOIN items ON receipts.ReceiptNumber = items.Receipt \nINNER JOIN goods ON items.Item = goods.Id \nWHERE goods.Price > 13",
        "test": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
        "generated_results": [
            [
                51991
            ],
            [
                83085
            ],
            [
                13355
            ],
            [
                52761
            ],
            [
                58770
            ],
            [
                55944
            ],
            [
                16034
            ],
            [
                64451
            ],
            [
                77406
            ],
            [
                99994
            ],
            [
                64861
            ],
            [
                33456
            ],
            [
                26240
            ],
            [
                37636
            ],
            [
                12698
            ],
            [
                26148
            ],
            [
                85858
            ],
            [
                67314
            ],
            [
                11891
            ],
            [
                45976
            ],
            [
                53376
            ],
            [
                96761
            ],
            [
                68199
            ],
            [
                49977
            ],
            [
                96258
            ],
            [
                12800
            ],
            [
                70655
            ],
            [
                19002
            ],
            [
                72207
            ],
            [
                38849
            ],
            [
                32701
            ],
            [
                68753
            ],
            [
                96531
            ],
            [
                53922
            ],
            [
                64477
            ],
            [
                77032
            ],
            [
                34910
            ],
            [
                45062
            ],
            [
                40305
            ],
            [
                33060
            ],
            [
                12396
            ],
            [
                70162
            ],
            [
                98806
            ],
            [
                61008
            ],
            [
                96402
            ],
            [
                35904
            ],
            [
                34579
            ],
            [
                17729
            ],
            [
                61948
            ],
            [
                95514
            ],
            [
                24829
            ],
            [
                44590
            ],
            [
                65165
            ],
            [
                16532
            ]
        ],
        "test_results": [
            [
                51991
            ],
            [
                83085
            ],
            [
                13355
            ],
            [
                52761
            ],
            [
                58770
            ],
            [
                55944
            ],
            [
                16034
            ],
            [
                64451
            ],
            [
                77406
            ],
            [
                99994
            ],
            [
                64861
            ],
            [
                33456
            ],
            [
                26240
            ],
            [
                37636
            ],
            [
                12698
            ],
            [
                26148
            ],
            [
                85858
            ],
            [
                67314
            ],
            [
                11891
            ],
            [
                45976
            ],
            [
                53376
            ],
            [
                96761
            ],
            [
                68199
            ],
            [
                49977
            ],
            [
                96258
            ],
            [
                12800
            ],
            [
                70655
            ],
            [
                19002
            ],
            [
                72207
            ],
            [
                38849
            ],
            [
                32701
            ],
            [
                68753
            ],
            [
                96531
            ],
            [
                53922
            ],
            [
                64477
            ],
            [
                77032
            ],
            [
                34910
            ],
            [
                45062
            ],
            [
                40305
            ],
            [
                33060
            ],
            [
                12396
            ],
            [
                70162
            ],
            [
                98806
            ],
            [
                61008
            ],
            [
                96402
            ],
            [
                35904
            ],
            [
                34579
            ],
            [
                17729
            ],
            [
                61948
            ],
            [
                95514
            ],
            [
                24829
            ],
            [
                44590
            ],
            [
                65165
            ],
            [
                16532
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0010178089141845703,
        "generation_tokens": 788,
        "judging_tokens": 197,
        "generation_failed": false
    },
    {
        "question": "What are the flavors available for Cake but not for Tart?",
        "generated": "SELECT DISTINCT flavor \nFROM goods\nWHERE food = 'Cake' \nAND flavor NOT IN (SELECT DISTINCT flavor FROM goods WHERE food = 'Tart')",
        "test": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
        "generated_results": [
            [
                "Casino"
            ],
            [
                "Opera"
            ],
            [
                "Strawberry"
            ],
            [
                "Truffle"
            ],
            [
                "Napoleon"
            ]
        ],
        "test_results": [
            [
                "Casino"
            ],
            [
                "Napoleon"
            ],
            [
                "Opera"
            ],
            [
                "Strawberry"
            ],
            [
                "Truffle"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0015218257904052734,
        "generation_tokens": 490,
        "judging_tokens": 182,
        "generation_failed": false
    },
    {
        "question": "How many goods are available for each food type?",
        "generated": "SELECT food, COUNT(*) AS NumberOfGoods FROM goods GROUP BY food",
        "test": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "generated_results": [
            [
                "Bear Claw",
                1
            ],
            [
                "Cake",
                7
            ],
            [
                "Cookie",
                7
            ],
            [
                "Croissant",
                5
            ],
            [
                "Danish",
                3
            ],
            [
                "Eclair",
                3
            ],
            [
                "Meringue",
                2
            ],
            [
                "Pie",
                1
            ],
            [
                "Tart",
                10
            ],
            [
                "Twist",
                1
            ]
        ],
        "test_results": [
            [
                1,
                "Bear Claw"
            ],
            [
                7,
                "Cake"
            ],
            [
                7,
                "Cookie"
            ],
            [
                5,
                "Croissant"
            ],
            [
                3,
                "Danish"
            ],
            [
                3,
                "Eclair"
            ],
            [
                2,
                "Meringue"
            ],
            [
                1,
                "Pie"
            ],
            [
                10,
                "Tart"
            ],
            [
                1,
                "Twist"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0015137195587158203,
        "generation_tokens": 694,
        "judging_tokens": 162,
        "generation_failed": false
    },
    {
        "question": "How many cusomters visited on each date?",
        "generated": "SELECT Date, COUNT(DISTINCT CustomerId) AS UniqueVisitors FROM receipts GROUP BY Date",
        "test": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "generated_results": [
            [
                "1-Oct-2007",
                1
            ],
            [
                "10-Oct-2007",
                9
            ],
            [
                "11-Oct-2007",
                2
            ],
            [
                "12-Oct-2007",
                9
            ],
            [
                "13-Oct-2007",
                5
            ],
            [
                "14-Oct-2007",
                5
            ],
            [
                "15-Oct-2007",
                8
            ],
            [
                "16-Oct-2007",
                9
            ],
            [
                "17-Oct-2007",
                4
            ],
            [
                "18-Oct-2007",
                4
            ],
            [
                "19-Oct-2007",
                4
            ],
            [
                "2-Oct-2007",
                3
            ],
            [
                "20-Oct-2007",
                9
            ],
            [
                "21-Oct-2007",
                5
            ],
            [
                "22-Oct-2007",
                7
            ],
            [
                "23-Oct-2007",
                6
            ],
            [
                "24-Oct-2007",
                5
            ],
            [
                "25-Oct-2007",
                6
            ],
            [
                "26-Oct-2007",
                3
            ],
            [
                "27-Oct-2007",
                3
            ],
            [
                "28-Oct-2007",
                5
            ],
            [
                "29-Oct-2007",
                6
            ],
            [
                "3-Oct-2007",
                6
            ],
            [
                "30-Oct-2007",
                4
            ],
            [
                "31-Oct-2007",
                6
            ],
            [
                "4-Oct-2007",
                8
            ],
            [
                "5-Oct-2007",
                3
            ],
            [
                "6-Oct-2007",
                3
            ],
            [
                "7-Oct-2007",
                6
            ],
            [
                "8-Oct-2007",
                4
            ],
            [
                "9-Oct-2007",
                9
            ]
        ],
        "test_results": [
            [
                "1-Oct-2007",
                1
            ],
            [
                "10-Oct-2007",
                9
            ],
            [
                "11-Oct-2007",
                2
            ],
            [
                "12-Oct-2007",
                9
            ],
            [
                "13-Oct-2007",
                5
            ],
            [
                "14-Oct-2007",
                5
            ],
            [
                "15-Oct-2007",
                8
            ],
            [
                "16-Oct-2007",
                9
            ],
            [
                "17-Oct-2007",
                4
            ],
            [
                "18-Oct-2007",
                4
            ],
            [
                "19-Oct-2007",
                4
            ],
            [
                "2-Oct-2007",
                3
            ],
            [
                "20-Oct-2007",
                9
            ],
            [
                "21-Oct-2007",
                5
            ],
            [
                "22-Oct-2007",
                7
            ],
            [
                "23-Oct-2007",
                6
            ],
            [
                "24-Oct-2007",
                5
            ],
            [
                "25-Oct-2007",
                6
            ],
            [
                "26-Oct-2007",
                3
            ],
            [
                "27-Oct-2007",
                3
            ],
            [
                "28-Oct-2007",
                5
            ],
            [
                "29-Oct-2007",
                6
            ],
            [
                "3-Oct-2007",
                6
            ],
            [
                "30-Oct-2007",
                4
            ],
            [
                "31-Oct-2007",
                6
            ],
            [
                "4-Oct-2007",
                8
            ],
            [
                "5-Oct-2007",
                3
            ],
            [
                "6-Oct-2007",
                3
            ],
            [
                "7-Oct-2007",
                6
            ],
            [
                "8-Oct-2007",
                4
            ],
            [
                "9-Oct-2007",
                9
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0025148391723632812,
        "generation_tokens": 446,
        "judging_tokens": 168,
        "generation_failed": false
    }
]