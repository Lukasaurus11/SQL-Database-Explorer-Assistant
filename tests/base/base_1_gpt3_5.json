[
    {
        "question": "What is the average price for each food type?",
        "generated": "SELECT food, AVG(price) AS average_price \nFROM goods \nGROUP BY food",
        "test": "SELECT avg(price) ,  food FROM goods GROUP BY food",
        "generated_results": [
            [
                "Bear Claw",
                1.95
            ],
            [
                "Cake",
                13.027142857142858
            ],
            [
                "Cookie",
                1.0671428571428572
            ],
            [
                "Croissant",
                1.5699999999999998
            ],
            [
                "Danish",
                1.15
            ],
            [
                "Eclair",
                3.3333333333333335
            ],
            [
                "Meringue",
                1.2
            ],
            [
                "Pie",
                5.25
            ],
            [
                "Tart",
                3.4
            ],
            [
                "Twist",
                1.15
            ]
        ],
        "test_results": [
            [
                1.95,
                "Bear Claw"
            ],
            [
                13.027142857142858,
                "Cake"
            ],
            [
                1.0671428571428572,
                "Cookie"
            ],
            [
                1.5699999999999998,
                "Croissant"
            ],
            [
                1.15,
                "Danish"
            ],
            [
                3.3333333333333335,
                "Eclair"
            ],
            [
                1.2,
                "Meringue"
            ],
            [
                5.25,
                "Pie"
            ],
            [
                3.4,
                "Tart"
            ],
            [
                1.15,
                "Twist"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0009996891021728516,
        "generation_tokens": 709,
        "judging_tokens": 165,
        "generation_failed": false
    },
    {
        "question": "What is the three most popular goods in this bakery?",
        "generated": "SELECT food, COUNT(*) AS total_sold\nFROM goods\nGROUP BY food\nORDER BY total_sold DESC\nLIMIT 3",
        "test": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
        "generated_results": [
            [
                "Tart",
                10
            ],
            [
                "Cookie",
                7
            ],
            [
                "Cake",
                7
            ]
        ],
        "test_results": [
            [
                "90-APP-11"
            ],
            [
                "90-APR-PF"
            ],
            [
                "90-BLK-PF"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0009987354278564453,
        "generation_tokens": 727,
        "judging_tokens": 175,
        "generation_failed": false
    },
    {
        "question": "What is the most expensive cake and its flavor?",
        "generated": "SELECT MAX(price) AS \"Most expensive price\",\n       flavor AS \"Cake flavor\"\nFROM goods\nWHERE food = 'Cake';",
        "test": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
        "generated_results": [
            [
                15.95,
                "Casino"
            ]
        ],
        "test_results": [
            [
                "20-CA-7.5",
                "Casino"
            ]
        ],
        "match": false,
        "confidence_score": 0.8,
        "execution_time": 0.0010061264038085938,
        "generation_tokens": 551,
        "judging_tokens": 177,
        "generation_failed": false
    },
    {
        "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
        "generated": "SELECT CustomerId, COUNT(ReceiptNumber) AS TotalPurchases\nFROM receipts\nGROUP BY CustomerId\nORDER BY TotalPurchases DESC\nLIMIT 1",
        "test": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
        "generated_results": [
            [
                8,
                18
            ]
        ],
        "test_results": [
            [
                8,
                18
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0,
        "generation_tokens": 661,
        "judging_tokens": 193,
        "generation_failed": false
    },
    {
        "question": "Order the distinct good ids.",
        "generated": "SELECT id\nFROM goods\nGROUP BY id\nORDER BY id;",
        "test": "SELECT DISTINCT id FROM goods ORDER BY id",
        "generated_results": [
            [
                "20-BC-C-10"
            ],
            [
                "20-BC-L-10"
            ],
            [
                "20-CA-7.5"
            ],
            [
                "24-8x10"
            ],
            [
                "25-STR-9"
            ],
            [
                "26-8x10"
            ],
            [
                "45-CH"
            ],
            [
                "45-CO"
            ],
            [
                "45-VA"
            ],
            [
                "46-11"
            ],
            [
                "50-ALM"
            ],
            [
                "50-APP"
            ],
            [
                "50-APR"
            ],
            [
                "50-CH"
            ],
            [
                "50-CHS"
            ],
            [
                "51-APP"
            ],
            [
                "51-APR"
            ],
            [
                "51-ATW"
            ],
            [
                "51-BC"
            ],
            [
                "51-BLU"
            ],
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-LEM"
            ],
            [
                "70-M-CH-DZ"
            ],
            [
                "70-M-VA-SM-DZ"
            ],
            [
                "70-MAR"
            ],
            [
                "70-R"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ],
            [
                "90-ALM-I"
            ],
            [
                "90-APIE-10"
            ],
            [
                "90-APP-11"
            ],
            [
                "90-APR-PF"
            ],
            [
                "90-BER-11"
            ],
            [
                "90-BLK-PF"
            ],
            [
                "90-BLU-11"
            ],
            [
                "90-CH-PF"
            ],
            [
                "90-CHR-11"
            ],
            [
                "90-LEM-11"
            ],
            [
                "90-PEC-11"
            ]
        ],
        "test_results": [
            [
                "20-BC-C-10"
            ],
            [
                "20-BC-L-10"
            ],
            [
                "20-CA-7.5"
            ],
            [
                "24-8x10"
            ],
            [
                "25-STR-9"
            ],
            [
                "26-8x10"
            ],
            [
                "45-CH"
            ],
            [
                "45-CO"
            ],
            [
                "45-VA"
            ],
            [
                "46-11"
            ],
            [
                "50-ALM"
            ],
            [
                "50-APP"
            ],
            [
                "50-APR"
            ],
            [
                "50-CH"
            ],
            [
                "50-CHS"
            ],
            [
                "51-APP"
            ],
            [
                "51-APR"
            ],
            [
                "51-ATW"
            ],
            [
                "51-BC"
            ],
            [
                "51-BLU"
            ],
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-LEM"
            ],
            [
                "70-M-CH-DZ"
            ],
            [
                "70-M-VA-SM-DZ"
            ],
            [
                "70-MAR"
            ],
            [
                "70-R"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ],
            [
                "90-ALM-I"
            ],
            [
                "90-APIE-10"
            ],
            [
                "90-APP-11"
            ],
            [
                "90-APR-PF"
            ],
            [
                "90-BER-11"
            ],
            [
                "90-BLK-PF"
            ],
            [
                "90-BLU-11"
            ],
            [
                "90-CH-PF"
            ],
            [
                "90-CHR-11"
            ],
            [
                "90-LEM-11"
            ],
            [
                "90-PEC-11"
            ]
        ],
        "match": true,
        "confidence_score": 0.9,
        "execution_time": 0.00200653076171875,
        "generation_tokens": 387,
        "judging_tokens": 161,
        "generation_failed": false
    },
    {
        "question": "What are all the ids of goods with an id which contains \"APP\"?",
        "generated": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
        "test": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
        "generated_results": [
            [
                "50-APP"
            ],
            [
                "51-APP"
            ],
            [
                "90-APP-11"
            ]
        ],
        "test_results": [
            [
                "50-APP"
            ],
            [
                "51-APP"
            ],
            [
                "90-APP-11"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0010006427764892578,
        "generation_tokens": 407,
        "judging_tokens": 165,
        "generation_failed": false
    },
    {
        "question": "What is the id and flavor of the cheapest cookie?",
        "generated": "SELECT id, flavor FROM goods WHERE food = 'Cookie' ORDER BY price ASC LIMIT 1",
        "test": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
        "generated_results": [
            [
                "70-LEM",
                "Lemon"
            ]
        ],
        "test_results": [
            [
                "70-LEM",
                "Lemon"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0,
        "generation_tokens": 383,
        "judging_tokens": 169,
        "generation_failed": false
    },
    {
        "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
        "generated": null,
        "test": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
        "generated_results": [],
        "test_results": [
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-R"
            ],
            [
                "70-LEM"
            ],
            [
                "70-MAR"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0010008811950683594,
        "generation_tokens": 763,
        "judging_tokens": 186,
        "generation_failed": true
    },
    {
        "question": "Find the id of customers who shopped at the bakery at least 15 times.",
        "generated": "SELECT CustomerId\nFROM receipts\nGROUP BY CustomerId\nHAVING COUNT(*) >= 15",
        "test": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
        "generated_results": [
            [
                6
            ],
            [
                7
            ],
            [
                8
            ],
            [
                14
            ],
            [
                20
            ]
        ],
        "test_results": [
            [
                6
            ],
            [
                7
            ],
            [
                8
            ],
            [
                14
            ],
            [
                20
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.001005411148071289,
        "generation_tokens": 663,
        "judging_tokens": 175,
        "generation_failed": false
    },
    {
        "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
        "generated": "SELECT ReceiptNumber\nFROM receipts\nWHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'LOGAN')\nAND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Croissant'));",
        "test": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
        "generated_results": [
            [
                38849
            ],
            [
                39685
            ],
            [
                45062
            ],
            [
                86085
            ]
        ],
        "test_results": [
            [
                86085
            ],
            [
                86085
            ],
            [
                39685
            ],
            [
                38849
            ],
            [
                45062
            ]
        ],
        "match": false,
        "confidence_score": 0.9,
        "execution_time": 0.0010008811950683594,
        "generation_tokens": 827,
        "judging_tokens": 205,
        "generation_failed": false
    },
    {
        "question": "Give me the list of ids of all goods whose id has \"APP\".",
        "generated": "SELECT id FROM goods WHERE id LIKE '%APP%'",
        "test": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
        "generated_results": [
            [
                "50-APP"
            ],
            [
                "51-APP"
            ],
            [
                "90-APP-11"
            ]
        ],
        "test_results": [
            [
                "50-APP"
            ],
            [
                "51-APP"
            ],
            [
                "90-APP-11"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0009958744049072266,
        "generation_tokens": 351,
        "judging_tokens": 164,
        "generation_failed": false
    },
    {
        "question": "Give the ids of cookes that are cheaper than any croissant.",
        "generated": "SELECT id \nFROM goods \nWHERE food = 'Cookie' \nAND price < (SELECT MIN(price) \n            FROM goods \n            WHERE food = 'Croissant');",
        "test": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "generated_results": [
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-R"
            ],
            [
                "70-LEM"
            ],
            [
                "70-MAR"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ]
        ],
        "test_results": [
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-R"
            ],
            [
                "70-LEM"
            ],
            [
                "70-MAR"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0,
        "generation_tokens": 461,
        "judging_tokens": 187,
        "generation_failed": false
    },
    {
        "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
        "generated": "SELECT ReceiptNumber\nFROM receipts\nWHERE Date = (SELECT MIN(Date) FROM receipts)\nUNION\nSELECT T1.Receipt\nFROM items AS T1\nJOIN goods AS T2 ON T1.Item = T2.Id\nWHERE T2.Price > 10;",
        "test": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "generated_results": [
            [
                11891
            ],
            [
                12396
            ],
            [
                12698
            ],
            [
                12800
            ],
            [
                13355
            ],
            [
                16034
            ],
            [
                16532
            ],
            [
                17729
            ],
            [
                19002
            ],
            [
                24829
            ],
            [
                25906
            ],
            [
                26148
            ],
            [
                26240
            ],
            [
                28117
            ],
            [
                29908
            ],
            [
                32701
            ],
            [
                33060
            ],
            [
                33456
            ],
            [
                34579
            ],
            [
                34910
            ],
            [
                35904
            ],
            [
                37636
            ],
            [
                38849
            ],
            [
                40305
            ],
            [
                44590
            ],
            [
                44798
            ],
            [
                45062
            ],
            [
                45976
            ],
            [
                49977
            ],
            [
                51991
            ],
            [
                52761
            ],
            [
                53240
            ],
            [
                53376
            ],
            [
                53922
            ],
            [
                55944
            ],
            [
                58770
            ],
            [
                61008
            ],
            [
                61948
            ],
            [
                64451
            ],
            [
                64477
            ],
            [
                64861
            ],
            [
                65165
            ],
            [
                67314
            ],
            [
                68199
            ],
            [
                68753
            ],
            [
                70162
            ],
            [
                70655
            ],
            [
                72207
            ],
            [
                73437
            ],
            [
                76663
            ],
            [
                77032
            ],
            [
                77406
            ],
            [
                83085
            ],
            [
                85492
            ],
            [
                85858
            ],
            [
                95514
            ],
            [
                96258
            ],
            [
                96402
            ],
            [
                96531
            ],
            [
                96761
            ],
            [
                98806
            ],
            [
                99994
            ]
        ],
        "test_results": [
            [
                11891
            ],
            [
                12396
            ],
            [
                12698
            ],
            [
                12800
            ],
            [
                13355
            ],
            [
                16034
            ],
            [
                16532
            ],
            [
                17729
            ],
            [
                19002
            ],
            [
                24829
            ],
            [
                25906
            ],
            [
                26148
            ],
            [
                26240
            ],
            [
                28117
            ],
            [
                29908
            ],
            [
                32701
            ],
            [
                33060
            ],
            [
                33456
            ],
            [
                34579
            ],
            [
                34910
            ],
            [
                35904
            ],
            [
                37636
            ],
            [
                38849
            ],
            [
                40305
            ],
            [
                44590
            ],
            [
                44798
            ],
            [
                45062
            ],
            [
                45976
            ],
            [
                49977
            ],
            [
                51991
            ],
            [
                52761
            ],
            [
                53240
            ],
            [
                53376
            ],
            [
                53922
            ],
            [
                55944
            ],
            [
                58770
            ],
            [
                61008
            ],
            [
                61948
            ],
            [
                64451
            ],
            [
                64477
            ],
            [
                64861
            ],
            [
                65165
            ],
            [
                67314
            ],
            [
                68199
            ],
            [
                68753
            ],
            [
                70162
            ],
            [
                70655
            ],
            [
                72207
            ],
            [
                73437
            ],
            [
                76663
            ],
            [
                77032
            ],
            [
                77406
            ],
            [
                83085
            ],
            [
                85492
            ],
            [
                85858
            ],
            [
                95514
            ],
            [
                96258
            ],
            [
                96402
            ],
            [
                96531
            ],
            [
                96761
            ],
            [
                98806
            ],
            [
                99994
            ]
        ],
        "match": true,
        "confidence_score": 0.9,
        "execution_time": 0.0009999275207519531,
        "generation_tokens": 766,
        "judging_tokens": 215,
        "generation_failed": false
    },
    {
        "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
        "generated": "SELECT ReceiptNumber  \nFROM receipts \nWHERE CustomerId = 12 \nOR ReceiptNumber IN (\n    SELECT Receipt \n    FROM items \n    WHERE Item IN (\n        SELECT Id \n        FROM goods \n        WHERE Flavor = 'Apple' AND Food = 'Pie'\n    )\n);",
        "test": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
        "generated_results": [
            [
                11548
            ],
            [
                17685
            ],
            [
                21545
            ],
            [
                29226
            ],
            [
                39109
            ],
            [
                39605
            ],
            [
                39685
            ],
            [
                44798
            ],
            [
                47353
            ],
            [
                48647
            ],
            [
                50660
            ],
            [
                51991
            ],
            [
                53376
            ],
            [
                56365
            ],
            [
                66227
            ],
            [
                70796
            ],
            [
                85492
            ],
            [
                87454
            ],
            [
                91937
            ],
            [
                98806
            ]
        ],
        "test_results": [
            [
                11548
            ],
            [
                17685
            ],
            [
                21545
            ],
            [
                29226
            ],
            [
                39109
            ],
            [
                39605
            ],
            [
                39685
            ],
            [
                44798
            ],
            [
                47353
            ],
            [
                48647
            ],
            [
                50660
            ],
            [
                51991
            ],
            [
                53376
            ],
            [
                56365
            ],
            [
                66227
            ],
            [
                70796
            ],
            [
                85492
            ],
            [
                87454
            ],
            [
                91937
            ],
            [
                98806
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0009992122650146484,
        "generation_tokens": 1072,
        "judging_tokens": 219,
        "generation_failed": false
    },
    {
        "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
        "generated": null,
        "test": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
        "generated_results": [],
        "test_results": [
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-R"
            ],
            [
                "70-LEM"
            ],
            [
                "70-MAR"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0010027885437011719,
        "generation_tokens": 500,
        "judging_tokens": 182,
        "generation_failed": true
    },
    {
        "question": "Give the last names of customers who have been to the bakery more than 10 times?",
        "generated": "SELECT LastName\nFROM customers\nWHERE Id IN (\n    SELECT CustomerId\n    FROM receipts\n    GROUP BY CustomerId\n    HAVING COUNT(*) > 10\n)",
        "test": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
        "generated_results": [
            [
                "LOGAN"
            ],
            [
                "SLINGLAND"
            ],
            [
                "TOUSSAND"
            ],
            [
                "HELING"
            ],
            [
                "SOPKO"
            ],
            [
                "CALLENDAR"
            ],
            [
                "CRUZEN"
            ],
            [
                "ZEME"
            ]
        ],
        "test_results": [
            [
                "LOGAN"
            ],
            [
                "SLINGLAND"
            ],
            [
                "TOUSSAND"
            ],
            [
                "HELING"
            ],
            [
                "SOPKO"
            ],
            [
                "CALLENDAR"
            ],
            [
                "CRUZEN"
            ],
            [
                "ZEME"
            ]
        ],
        "match": true,
        "confidence_score": 0.9,
        "execution_time": 0.0010025501251220703,
        "generation_tokens": 612,
        "judging_tokens": 194,
        "generation_failed": false
    },
    {
        "question": "How many goods are available for each food type?",
        "generated": "SELECT food, COUNT(*) AS total_goods FROM goods GROUP BY food",
        "test": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "generated_results": [
            [
                "Bear Claw",
                1
            ],
            [
                "Cake",
                7
            ],
            [
                "Cookie",
                7
            ],
            [
                "Croissant",
                5
            ],
            [
                "Danish",
                3
            ],
            [
                "Eclair",
                3
            ],
            [
                "Meringue",
                2
            ],
            [
                "Pie",
                1
            ],
            [
                "Tart",
                10
            ],
            [
                "Twist",
                1
            ]
        ],
        "test_results": [
            [
                1,
                "Bear Claw"
            ],
            [
                7,
                "Cake"
            ],
            [
                7,
                "Cookie"
            ],
            [
                5,
                "Croissant"
            ],
            [
                3,
                "Danish"
            ],
            [
                3,
                "Eclair"
            ],
            [
                2,
                "Meringue"
            ],
            [
                1,
                "Pie"
            ],
            [
                10,
                "Tart"
            ],
            [
                1,
                "Twist"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0,
        "generation_tokens": 671,
        "judging_tokens": 162,
        "generation_failed": false
    },
    {
        "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
        "generated": "SELECT DISTINCT T3.CustomerId FROM receipts T3\nJOIN items T2 ON T3.ReceiptNumber = T2.Receipt\nJOIN goods T1 ON T2.Item = T1.Id\nWHERE T1.Flavor = 'Lemon' AND T1.Food = 'Cake'",
        "test": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
        "generated_results": [
            [
                6
            ],
            [
                11
            ],
            [
                12
            ],
            [
                3
            ],
            [
                9
            ],
            [
                2
            ],
            [
                8
            ]
        ],
        "test_results": [
            [
                6
            ],
            [
                11
            ],
            [
                12
            ],
            [
                3
            ],
            [
                9
            ],
            [
                2
            ],
            [
                8
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0009996891021728516,
        "generation_tokens": 787,
        "judging_tokens": 213,
        "generation_failed": false
    },
    {
        "question": "Give the three most purchased items at this bakery.",
        "generated": "SELECT T1.Item, count(*) AS TotalPurchases\nFROM items AS T1\nGROUP BY T1.Item\nORDER BY TotalPurchases DESC\nLIMIT 3",
        "test": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
        "generated_results": [
            [
                "90-APP-11",
                25
            ],
            [
                "90-APR-PF",
                22
            ],
            [
                "90-BLK-PF",
                20
            ]
        ],
        "test_results": [
            [
                "90-APP-11"
            ],
            [
                "90-APR-PF"
            ],
            [
                "90-BLK-PF"
            ]
        ],
        "match": false,
        "confidence_score": 0.9,
        "execution_time": 0.0010006427764892578,
        "generation_tokens": 645,
        "judging_tokens": 185,
        "generation_failed": false
    },
    {
        "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
        "generated": "SELECT MIN(price) ,  MAX(price) ,  food\nFROM goods\nGROUP BY food\nORDER BY food",
        "test": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
        "generated_results": [
            [
                1.95,
                1.95,
                "Bear Claw"
            ],
            [
                8.95,
                15.95,
                "Cake"
            ],
            [
                0.79,
                1.25,
                "Cookie"
            ],
            [
                1.45,
                1.75,
                "Croissant"
            ],
            [
                1.15,
                1.15,
                "Danish"
            ],
            [
                3.25,
                3.5,
                "Eclair"
            ],
            [
                1.15,
                1.25,
                "Meringue"
            ],
            [
                5.25,
                5.25,
                "Pie"
            ],
            [
                3.25,
                3.75,
                "Tart"
            ],
            [
                1.15,
                1.15,
                "Twist"
            ]
        ],
        "test_results": [
            [
                1.95,
                1.95,
                "Bear Claw"
            ],
            [
                8.95,
                15.95,
                "Cake"
            ],
            [
                0.79,
                1.25,
                "Cookie"
            ],
            [
                1.45,
                1.75,
                "Croissant"
            ],
            [
                1.15,
                1.15,
                "Danish"
            ],
            [
                3.25,
                3.5,
                "Eclair"
            ],
            [
                1.15,
                1.25,
                "Meringue"
            ],
            [
                5.25,
                5.25,
                "Pie"
            ],
            [
                3.25,
                3.75,
                "Tart"
            ],
            [
                1.15,
                1.15,
                "Twist"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0,
        "generation_tokens": 534,
        "judging_tokens": 177,
        "generation_failed": false
    },
    {
        "question": "Count the number of types of cake this bakery sells.",
        "generated": "SELECT COUNT(DISTINCT flavor) FROM goods WHERE food = \"Cake\"",
        "test": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
        "generated_results": [
            [
                7
            ]
        ],
        "test_results": [
            [
                7
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0009996891021728516,
        "generation_tokens": 747,
        "judging_tokens": 165,
        "generation_failed": false
    }
]