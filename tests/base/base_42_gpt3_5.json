[
    {
        "question": "Find the first name and last name of a customer who visited on the earliest date.",
        "generated": "SELECT FirstName, LastName\nFROM customers\nWHERE Id = (SELECT CustomerId\n            FROM receipts\n            ORDER BY Date\n            LIMIT 1)",
        "test": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
        "generated_results": [
            [
                "JOSETTE",
                "SLINGLAND"
            ]
        ],
        "test_results": [
            [
                "JOSETTE",
                "SLINGLAND"
            ]
        ],
        "match": true,
        "confidence_score": 0.9,
        "execution_time": 0.0009999275207519531,
        "generation_tokens": 453,
        "judging_tokens": 188,
        "generation_failed": false
    },
    {
        "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
        "generated": "SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber = (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id ORDER BY Price DESC LIMIT 1)",
        "test": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "generated_results": [
            [
                51991,
                "17-Oct-2007"
            ]
        ],
        "test_results": [
            [
                51991,
                "17-Oct-2007"
            ]
        ],
        "match": true,
        "confidence_score": 0.9,
        "execution_time": 0.0005068778991699219,
        "generation_tokens": 942,
        "judging_tokens": 193,
        "generation_failed": false
    },
    {
        "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
        "generated": null,
        "test": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
        "generated_results": [],
        "test_results": [
            [
                86085
            ],
            [
                86085
            ],
            [
                39685
            ],
            [
                38849
            ],
            [
                45062
            ]
        ],
        "match": false,
        "confidence_score": 0.9,
        "execution_time": 0.0005056858062744141,
        "generation_tokens": 827,
        "judging_tokens": 207,
        "generation_failed": true
    },
    {
        "question": "What are the ids and flavors of cakes, ordered by flavor?",
        "generated": "SELECT id ,  flavor FROM goods WHERE food  =  'Cake' ORDER BY flavor",
        "test": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
        "generated_results": [
            [
                "20-CA-7.5",
                "Casino"
            ],
            [
                "20-BC-C-10",
                "Chocolate"
            ],
            [
                "20-BC-L-10",
                "Lemon"
            ],
            [
                "46-11",
                "Napoleon"
            ],
            [
                "24-8x10",
                "Opera"
            ],
            [
                "25-STR-9",
                "Strawberry"
            ],
            [
                "26-8x10",
                "Truffle"
            ]
        ],
        "test_results": [
            [
                "20-CA-7.5",
                "Casino"
            ],
            [
                "20-BC-C-10",
                "Chocolate"
            ],
            [
                "20-BC-L-10",
                "Lemon"
            ],
            [
                "46-11",
                "Napoleon"
            ],
            [
                "24-8x10",
                "Opera"
            ],
            [
                "25-STR-9",
                "Strawberry"
            ],
            [
                "26-8x10",
                "Truffle"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.001001596450805664,
        "generation_tokens": 756,
        "judging_tokens": 170,
        "generation_failed": false
    },
    {
        "question": "What are the ids of customers who spend more than 5 on average for each good?",
        "generated": "SELECT T3.CustomerId\nFROM receipts AS T3\nWHERE T3.CustomerId IN \n    (SELECT CustomerId\n     FROM receipts\n     JOIN items ON receipts.ReceiptNumber = items.Receipt\n     JOIN goods ON items.Item = goods.Id\n     GROUP BY CustomerId\n     HAVING AVG(goods.Price) > 5);",
        "test": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "generated_results": [
            [
                10
            ],
            [
                4
            ],
            [
                4
            ],
            [
                10
            ],
            [
                4
            ],
            [
                10
            ],
            [
                4
            ],
            [
                10
            ],
            [
                4
            ],
            [
                10
            ],
            [
                10
            ],
            [
                10
            ],
            [
                4
            ],
            [
                10
            ]
        ],
        "test_results": [
            [
                4
            ],
            [
                10
            ]
        ],
        "match": false,
        "confidence_score": 0.8,
        "execution_time": 0.0010001659393310547,
        "generation_tokens": 632,
        "judging_tokens": 229,
        "generation_failed": false
    },
    {
        "question": "Find the ids of goods that have apple flavor.",
        "generated": "SELECT id FROM goods WHERE flavor = \"Apple\"",
        "test": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
        "generated_results": [
            [
                "90-APIE-10"
            ],
            [
                "90-APP-11"
            ],
            [
                "50-APP"
            ],
            [
                "51-APP"
            ]
        ],
        "test_results": [
            [
                "90-APIE-10"
            ],
            [
                "90-APP-11"
            ],
            [
                "50-APP"
            ],
            [
                "51-APP"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0009856224060058594,
        "generation_tokens": 692,
        "judging_tokens": 159,
        "generation_failed": false
    },
    {
        "question": "Return the ordered list of all good ids.",
        "generated": "SELECT id FROM goods ORDER BY id",
        "test": "SELECT DISTINCT id FROM goods ORDER BY id",
        "generated_results": [
            [
                "20-BC-C-10"
            ],
            [
                "20-BC-L-10"
            ],
            [
                "20-CA-7.5"
            ],
            [
                "24-8x10"
            ],
            [
                "25-STR-9"
            ],
            [
                "26-8x10"
            ],
            [
                "45-CH"
            ],
            [
                "45-CO"
            ],
            [
                "45-VA"
            ],
            [
                "46-11"
            ],
            [
                "50-ALM"
            ],
            [
                "50-APP"
            ],
            [
                "50-APR"
            ],
            [
                "50-CH"
            ],
            [
                "50-CHS"
            ],
            [
                "51-APP"
            ],
            [
                "51-APR"
            ],
            [
                "51-ATW"
            ],
            [
                "51-BC"
            ],
            [
                "51-BLU"
            ],
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-LEM"
            ],
            [
                "70-M-CH-DZ"
            ],
            [
                "70-M-VA-SM-DZ"
            ],
            [
                "70-MAR"
            ],
            [
                "70-R"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ],
            [
                "90-ALM-I"
            ],
            [
                "90-APIE-10"
            ],
            [
                "90-APP-11"
            ],
            [
                "90-APR-PF"
            ],
            [
                "90-BER-11"
            ],
            [
                "90-BLK-PF"
            ],
            [
                "90-BLU-11"
            ],
            [
                "90-CH-PF"
            ],
            [
                "90-CHR-11"
            ],
            [
                "90-LEM-11"
            ],
            [
                "90-PEC-11"
            ]
        ],
        "test_results": [
            [
                "20-BC-C-10"
            ],
            [
                "20-BC-L-10"
            ],
            [
                "20-CA-7.5"
            ],
            [
                "24-8x10"
            ],
            [
                "25-STR-9"
            ],
            [
                "26-8x10"
            ],
            [
                "45-CH"
            ],
            [
                "45-CO"
            ],
            [
                "45-VA"
            ],
            [
                "46-11"
            ],
            [
                "50-ALM"
            ],
            [
                "50-APP"
            ],
            [
                "50-APR"
            ],
            [
                "50-CH"
            ],
            [
                "50-CHS"
            ],
            [
                "51-APP"
            ],
            [
                "51-APR"
            ],
            [
                "51-ATW"
            ],
            [
                "51-BC"
            ],
            [
                "51-BLU"
            ],
            [
                "70-GA"
            ],
            [
                "70-GON"
            ],
            [
                "70-LEM"
            ],
            [
                "70-M-CH-DZ"
            ],
            [
                "70-M-VA-SM-DZ"
            ],
            [
                "70-MAR"
            ],
            [
                "70-R"
            ],
            [
                "70-TU"
            ],
            [
                "70-W"
            ],
            [
                "90-ALM-I"
            ],
            [
                "90-APIE-10"
            ],
            [
                "90-APP-11"
            ],
            [
                "90-APR-PF"
            ],
            [
                "90-BER-11"
            ],
            [
                "90-BLK-PF"
            ],
            [
                "90-BLU-11"
            ],
            [
                "90-CH-PF"
            ],
            [
                "90-CHR-11"
            ],
            [
                "90-LEM-11"
            ],
            [
                "90-PEC-11"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0009989738464355469,
        "generation_tokens": 492,
        "judging_tokens": 155,
        "generation_failed": false
    },
    {
        "question": "What are the three dates for which the most receipts were given?",
        "generated": "SELECT Date \nFROM receipts \nGROUP BY Date \nORDER BY COUNT(ReceiptNumber) DESC \nLIMIT 3",
        "test": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "generated_results": [
            [
                "12-Oct-2007"
            ],
            [
                "9-Oct-2007"
            ],
            [
                "7-Oct-2007"
            ]
        ],
        "test_results": [
            [
                "12-Oct-2007"
            ],
            [
                "9-Oct-2007"
            ],
            [
                "7-Oct-2007"
            ]
        ],
        "match": true,
        "confidence_score": 0.8,
        "execution_time": 0.0009999275207519531,
        "generation_tokens": 583,
        "judging_tokens": 176,
        "generation_failed": false
    },
    {
        "question": "How many customers have bought each food?",
        "generated": "SELECT food, count(DISTINCT CustomerId) FROM goods\nJOIN items ON goods.Id = items.Item\nJOIN receipts ON items.Receipt = receipts.ReceiptNumber\nGROUP BY food",
        "test": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
        "generated_results": [
            [
                "Bear Claw",
                15
            ],
            [
                "Cake",
                20
            ],
            [
                "Cookie",
                20
            ],
            [
                "Croissant",
                17
            ],
            [
                "Danish",
                17
            ],
            [
                "Eclair",
                16
            ],
            [
                "Meringue",
                15
            ],
            [
                "Pie",
                9
            ],
            [
                "Tart",
                20
            ],
            [
                "Twist",
                11
            ]
        ],
        "test_results": [
            [
                "Bear Claw",
                15
            ],
            [
                "Cake",
                20
            ],
            [
                "Cookie",
                20
            ],
            [
                "Croissant",
                17
            ],
            [
                "Danish",
                17
            ],
            [
                "Eclair",
                16
            ],
            [
                "Meringue",
                15
            ],
            [
                "Pie",
                9
            ],
            [
                "Tart",
                20
            ],
            [
                "Twist",
                11
            ]
        ],
        "match": true,
        "confidence_score": 0.8,
        "execution_time": 0.0011339187622070312,
        "generation_tokens": 767,
        "judging_tokens": 186,
        "generation_failed": false
    },
    {
        "question": "What is the cheapest good with cheese flavor?",
        "generated": "SELECT food || ' with ' || flavor || ' flavor is the cheapest, priced at ' || price || ' dollars.' FROM goods WHERE flavor = 'Cheese' ORDER BY price LIMIT 1",
        "test": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
        "generated_results": [
            [
                "Croissant with Cheese flavor is the cheapest, priced at 1.75 dollars."
            ]
        ],
        "test_results": [
            [
                1.75
            ]
        ],
        "match": false,
        "confidence_score": 0.9,
        "execution_time": 0.0,
        "generation_tokens": 384,
        "judging_tokens": 189,
        "generation_failed": false
    },
    {
        "question": "What are the ids of goods whose price is above twice the average price of all goods?",
        "generated": "SELECT id \nFROM goods \nWHERE price > (SELECT 2 * avg(price) FROM goods)",
        "test": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
        "generated_results": [
            [
                "20-BC-C-10"
            ],
            [
                "20-BC-L-10"
            ],
            [
                "20-CA-7.5"
            ],
            [
                "24-8x10"
            ],
            [
                "25-STR-9"
            ],
            [
                "26-8x10"
            ],
            [
                "46-11"
            ]
        ],
        "test_results": [
            [
                "20-BC-C-10"
            ],
            [
                "20-BC-L-10"
            ],
            [
                "20-CA-7.5"
            ],
            [
                "24-8x10"
            ],
            [
                "25-STR-9"
            ],
            [
                "26-8x10"
            ],
            [
                "46-11"
            ],
            [
                "90-APIE-10"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0,
        "generation_tokens": 573,
        "judging_tokens": 177,
        "generation_failed": false
    },
    {
        "question": "What are the customer ids of customers who have at least 15 receipts?",
        "generated": "SELECT CustomerId\nFROM receipts\nGROUP BY CustomerId\nHAVING COUNT(ReceiptNumber) >= 15",
        "test": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
        "generated_results": [
            [
                6
            ],
            [
                7
            ],
            [
                8
            ],
            [
                14
            ],
            [
                20
            ]
        ],
        "test_results": [
            [
                6
            ],
            [
                7
            ],
            [
                8
            ],
            [
                14
            ],
            [
                20
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0009882450103759766,
        "generation_tokens": 995,
        "judging_tokens": 176,
        "generation_failed": false
    },
    {
        "question": "Find the ids of customers whose average spending for each good is above 5.",
        "generated": "SELECT receipts.CustomerId\nFROM receipts\nJOIN items ON receipts.ReceiptNumber = items.Receipt\nJOIN goods ON items.Item = goods.Id\nGROUP BY receipts.CustomerId\nHAVING SUM(goods.Price) / COUNT(DISTINCT goods.Id) > 5",
        "test": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "generated_results": [
            [
                1
            ],
            [
                3
            ],
            [
                4
            ],
            [
                6
            ],
            [
                7
            ],
            [
                8
            ],
            [
                10
            ],
            [
                14
            ],
            [
                16
            ],
            [
                18
            ],
            [
                19
            ],
            [
                20
            ]
        ],
        "test_results": [
            [
                4
            ],
            [
                10
            ]
        ],
        "match": false,
        "confidence_score": 0.9,
        "execution_time": 0.002003908157348633,
        "generation_tokens": 622,
        "judging_tokens": 210,
        "generation_failed": false
    },
    {
        "question": "Count the number of types of cake this bakery sells.",
        "generated": "SELECT COUNT(DISTINCT flavor) FROM goods WHERE food = \"Cake\"",
        "test": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
        "generated_results": [
            [
                7
            ]
        ],
        "test_results": [
            [
                7
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0010573863983154297,
        "generation_tokens": 802,
        "judging_tokens": 165,
        "generation_failed": false
    },
    {
        "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
        "generated": "SELECT r.ReceiptNumber, r.Date\nFROM receipts r\nJOIN items i ON r.ReceiptNumber = i.Receipt\nJOIN goods g ON i.Item = g.Id\nWHERE g.Price = (SELECT MAX(Price) FROM goods)",
        "test": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "generated_results": [
            [
                51991,
                "17-Oct-2007"
            ],
            [
                83085,
                "12-Oct-2007"
            ],
            [
                83085,
                "12-Oct-2007"
            ],
            [
                13355,
                "19-Oct-2007"
            ],
            [
                52761,
                "27-Oct-2007"
            ],
            [
                58770,
                "22-Oct-2007"
            ],
            [
                55944,
                "16-Oct-2007"
            ],
            [
                16034,
                "10-Oct-2007"
            ],
            [
                64451,
                "10-Oct-2007"
            ],
            [
                77406,
                "9-Oct-2007"
            ],
            [
                99994,
                "21-Oct-2007"
            ],
            [
                26240,
                "7-Oct-2007"
            ],
            [
                37636,
                "20-Oct-2007"
            ],
            [
                12698,
                "23-Oct-2007"
            ],
            [
                26148,
                "19-Oct-2007"
            ],
            [
                85858,
                "31-Oct-2007"
            ],
            [
                67314,
                "23-Oct-2007"
            ],
            [
                45976,
                "3-Oct-2007"
            ],
            [
                96761,
                "14-Oct-2007"
            ],
            [
                68199,
                "4-Oct-2007"
            ],
            [
                49977,
                "18-Oct-2007"
            ],
            [
                96258,
                "12-Oct-2007"
            ],
            [
                12800,
                "22-Oct-2007"
            ],
            [
                70655,
                "6-Oct-2007"
            ],
            [
                19002,
                "19-Oct-2007"
            ],
            [
                72207,
                "15-Oct-2007"
            ],
            [
                32701,
                "19-Oct-2007"
            ],
            [
                96531,
                "12-Oct-2007"
            ],
            [
                64477,
                "16-Oct-2007"
            ],
            [
                34910,
                "7-Oct-2007"
            ],
            [
                45062,
                "23-Oct-2007"
            ],
            [
                40305,
                "25-Oct-2007"
            ],
            [
                12396,
                "10-Oct-2007"
            ],
            [
                98806,
                "15-Oct-2007"
            ],
            [
                61008,
                "9-Oct-2007"
            ],
            [
                96402,
                "4-Oct-2007"
            ],
            [
                34579,
                "8-Oct-2007"
            ],
            [
                34579,
                "8-Oct-2007"
            ],
            [
                17729,
                "16-Oct-2007"
            ],
            [
                61948,
                "4-Oct-2007"
            ],
            [
                24829,
                "7-Oct-2007"
            ],
            [
                44590,
                "12-Oct-2007"
            ],
            [
                65165,
                "4-Oct-2007"
            ],
            [
                16532,
                "21-Oct-2007"
            ]
        ],
        "test_results": [
            [
                51991,
                "17-Oct-2007"
            ]
        ],
        "match": false,
        "confidence_score": 0.8,
        "execution_time": 0.0009999275207519531,
        "generation_tokens": 940,
        "judging_tokens": 209,
        "generation_failed": false
    },
    {
        "question": "Which item was bought the fewest times?",
        "generated": "SELECT Item \nFROM items \nGROUP BY Item \nHAVING COUNT(*) = (\n    SELECT MIN(cnt) \n    FROM (\n        SELECT COUNT(*) as cnt \n        FROM items \n        GROUP BY Item\n    )\n);",
        "test": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
        "generated_results": [
            [
                "50-CH"
            ]
        ],
        "test_results": [
            [
                "50-CH"
            ]
        ],
        "match": true,
        "confidence_score": 0.9,
        "execution_time": 0.0009999275207519531,
        "generation_tokens": 544,
        "judging_tokens": 194,
        "generation_failed": false
    },
    {
        "question": "Give the average price for each food type.",
        "generated": "SELECT AVG(price), food FROM goods GROUP BY food",
        "test": "SELECT avg(price) ,  food FROM goods GROUP BY food",
        "generated_results": [
            [
                1.95,
                "Bear Claw"
            ],
            [
                13.027142857142858,
                "Cake"
            ],
            [
                1.0671428571428572,
                "Cookie"
            ],
            [
                1.5699999999999998,
                "Croissant"
            ],
            [
                1.15,
                "Danish"
            ],
            [
                3.3333333333333335,
                "Eclair"
            ],
            [
                1.2,
                "Meringue"
            ],
            [
                5.25,
                "Pie"
            ],
            [
                3.4,
                "Tart"
            ],
            [
                1.15,
                "Twist"
            ]
        ],
        "test_results": [
            [
                1.95,
                "Bear Claw"
            ],
            [
                13.027142857142858,
                "Cake"
            ],
            [
                1.0671428571428572,
                "Cookie"
            ],
            [
                1.5699999999999998,
                "Croissant"
            ],
            [
                1.15,
                "Danish"
            ],
            [
                3.3333333333333335,
                "Eclair"
            ],
            [
                1.2,
                "Meringue"
            ],
            [
                5.25,
                "Pie"
            ],
            [
                3.4,
                "Tart"
            ],
            [
                1.15,
                "Twist"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0,
        "generation_tokens": 529,
        "judging_tokens": 158,
        "generation_failed": false
    },
    {
        "question": "What are the flavors available for Cake but not for Tart?",
        "generated": "SELECT flavor FROM goods WHERE food = 'Cake' AND flavor NOT IN (SELECT flavor FROM goods WHERE food = 'Tart')",
        "test": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
        "generated_results": [
            [
                "Casino"
            ],
            [
                "Opera"
            ],
            [
                "Strawberry"
            ],
            [
                "Truffle"
            ],
            [
                "Napoleon"
            ]
        ],
        "test_results": [
            [
                "Casino"
            ],
            [
                "Napoleon"
            ],
            [
                "Opera"
            ],
            [
                "Strawberry"
            ],
            [
                "Truffle"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0010008811950683594,
        "generation_tokens": 451,
        "judging_tokens": 177,
        "generation_failed": false
    },
    {
        "question": "What is the id and flavor of the cheapest cookie?",
        "generated": "SELECT id, flavor FROM goods WHERE food = \"Cookie\" ORDER BY price ASC LIMIT 1",
        "test": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
        "generated_results": [
            [
                "70-LEM",
                "Lemon"
            ]
        ],
        "test_results": [
            [
                "70-LEM",
                "Lemon"
            ]
        ],
        "match": true,
        "confidence_score": 1.0,
        "execution_time": 0.0015070438385009766,
        "generation_tokens": 482,
        "judging_tokens": 169,
        "generation_failed": false
    },
    {
        "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
        "generated": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T2.LastName HAVING COUNT(*) > 10",
        "test": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
        "generated_results": [
            [
                "CALLENDAR"
            ],
            [
                "CRUZEN"
            ],
            [
                "HELING"
            ],
            [
                "LOGAN"
            ],
            [
                "SLINGLAND"
            ],
            [
                "SOPKO"
            ],
            [
                "TOUSSAND"
            ],
            [
                "ZEME"
            ]
        ],
        "test_results": [
            [
                "LOGAN"
            ],
            [
                "SLINGLAND"
            ],
            [
                "TOUSSAND"
            ],
            [
                "HELING"
            ],
            [
                "SOPKO"
            ],
            [
                "CALLENDAR"
            ],
            [
                "CRUZEN"
            ],
            [
                "ZEME"
            ]
        ],
        "match": false,
        "confidence_score": 1.0,
        "execution_time": 0.0010013580322265625,
        "generation_tokens": 826,
        "judging_tokens": 194,
        "generation_failed": false
    },
    {
        "question": "What are the full names of customers who bought apple flavored Tarts?",
        "generated": "SELECT CONCAT(firstname, ' ', lastname) AS full_name FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'Apple' AND food = 'Tart')));",
        "test": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
        "generated_results": [
            [
                "JULIET LOGAN"
            ],
            [
                "TERRELL ARZT"
            ],
            [
                "OSVALDO DUNLOW"
            ],
            [
                "JOSETTE SLINGLAND"
            ],
            [
                "SHARRON TOUSSAND"
            ],
            [
                "RUPERT HELING"
            ],
            [
                "CORETTA DUKELOW"
            ],
            [
                "KIP ARNN"
            ],
            [
                "RAYFORD SOPKO"
            ],
            [
                "DAVID CALLENDAR"
            ],
            [
                "ARIANE CRUZEN"
            ],
            [
                "CHARLENE MESDAQ"
            ],
            [
                "ALMETA DOMKOWSKI"
            ],
            [
                "NATACHA STENZ"
            ],
            [
                "STEPHEN ZEME"
            ]
        ],
        "test_results": [
            [
                "RAYFORD",
                "SOPKO"
            ],
            [
                "ARIANE",
                "CRUZEN"
            ],
            [
                "RUPERT",
                "HELING"
            ],
            [
                "TERRELL",
                "ARZT"
            ],
            [
                "ALMETA",
                "DOMKOWSKI"
            ],
            [
                "NATACHA",
                "STENZ"
            ],
            [
                "JULIET",
                "LOGAN"
            ],
            [
                "CHARLENE",
                "MESDAQ"
            ],
            [
                "KIP",
                "ARNN"
            ],
            [
                "SHARRON",
                "TOUSSAND"
            ],
            [
                "DAVID",
                "CALLENDAR"
            ],
            [
                "STEPHEN",
                "ZEME"
            ],
            [
                "CORETTA",
                "DUKELOW"
            ],
            [
                "JOSETTE",
                "SLINGLAND"
            ],
            [
                "OSVALDO",
                "DUNLOW"
            ]
        ],
        "match": false,
        "confidence_score": 0.9,
        "execution_time": 0.0019991397857666016,
        "generation_tokens": 793,
        "judging_tokens": 209,
        "generation_failed": false
    }
]